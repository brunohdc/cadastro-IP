# -*- coding: utf-8 -*-
"""classe_cadastro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9tug_jng1a7M0uPgOHE6W_CwFcxDUT2
"""

# from google.colab import drive
# drive.mount('/content/drive')

"""#MELHORIAS#

- retornar o total de pontos (avença / medidor, / tudo)
- retornar a potência em kW do parque (avença / medidor / tudo)
- retornar o consumo mensal do parque (avença / medidor / tudo)

- permitir diferenciar os gráficos do cadastro (avença / medidor / tudo)
"""

import pandas as pd
import plotly.express as px
import plotly.io as pio

pio.templates.default = "plotly_dark"

#dataframeCadastro = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/CONASA/Boa Vista/CadastroBV.xlsx')
# dataframeCadastro = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/CONASA/Boa Vista/CadastroBV_2019.04.xlsx')
# dataframeCadastro = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/CONASA/Boa Vista/cadastroCidade.xlsx')
# len(dataframeCadastro)

# dataframeCadastro

# dataframeCadastro.dtypes

class Cadastro:
  # Class attribute
    # type = 'Cadastro'
    def __init__(self, dataframe, horasAcionamento, medicaoSeparada): #The __init__() function can contain any number of parameters, but the first argument must always be the self variable.
        self.dataframe = dataframe
        self.horasAcionamento = horasAcionamento
        self.medicaoSeparada = medicaoSeparada

        self.dataframe.fillna(0, inplace=True)
        self.dataframe = dataframe.set_axis(['medicao', 'tecnologia', 'potencia_W', 'perdas_W', 'quantitativo'], axis=1)

        self.dataframe['potenciaTotal_kW'] = round(((self.dataframe['potencia_W']+self.dataframe['perdas_W'])*self.dataframe['quantitativo'])/1000,2)
        self.dataframe['consumoMensal_kWh'] = round((self.dataframe['potenciaTotal_kW'] * 30 * horasAcionamento),0)
        self.dataframe['consumoAnual_MWh'] = round((self.dataframe['potenciaTotal_kW'] * 365 * horasAcionamento)/1000,0)

        self.dataframe['potenciaLampada'] = self.dataframe['potencia_W'].astype(int).astype(str)
        self.dataframe['potenciaLampada'] = self.dataframe['potenciaLampada']+'W'
        print(self.dataframe)
        self.totalPontos = self.dataframe['quantitativo'].sum()
    def plotQuantitativo(self):
        fig = px.treemap(self.dataframe, path=[px.Constant("CADASTRO - Quantitativo"), 'tecnologia','potenciaLampada'],
                 values='quantitativo', color='tecnologia',
                 color_discrete_map={'LED':'green',
                                     'MVM':'white',
                                     'SAP':'gold',
                                     'MER':'red',
                                     '(?)':'black'}
                 )
        fig.data[0].textinfo = 'label+value+percent root'
        fig.layout.hovermode = False
        fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))
        return(fig.show())
    def plotTecnologia(self):
        fig = px.treemap(self.dataframe, path=[px.Constant("CADASTRO - Tecnologia"), 'tecnologia'],
                 values='quantitativo', color='tecnologia',
                 color_discrete_map={'LED':'green',
                                     'MVM':'white',
                                     'SAP':'gold',
                                     'MER':'red',
                                     '(?)':'black'}
                 )
        fig.data[0].textinfo = 'label+value+percent root'
        fig.layout.hovermode = False
        fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))
        return(fig.show())
    def plotConsumoMensal(self):
        fig = px.treemap(self.dataframe, path=[px.Constant("CADASTRO - Consumo mensal em kWh"), 'tecnologia'],
                 values='consumoMensal_kWh', color='tecnologia',
                 color_discrete_map={'LED':'green',
                                     'MVM':'white',
                                     'SAP':'gold',
                                     'VS':'gold',
                                     'MER':'red',
                                     '(?)':'black'}
                 )
        fig.data[0].textinfo = 'label+value+percent root'
        fig.layout.hovermode = False
        fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))
        return(fig.show())
    def printInfo(self):
        dataframeSemLinhaTotal = self.dataframe.drop(self.dataframe.tail(1).index)
        print('Total de pontos:',dataframeSemLinhaTotal['quantitativo'].sum())
        print('Potência média LED (W):',round(dataframeSemLinhaTotal.query("`tecnologia` == 'LED'")['potenciaTotal_kW'].sum()*1000/dataframeSemLinhaTotal.query("`tecnologia` == 'LED'")['quantitativo'].sum(),2))
        print('Potência média nãoLED (W):',round(dataframeSemLinhaTotal.query("`tecnologia` != 'LED'")['potenciaTotal_kW'].sum()*1000/dataframeSemLinhaTotal.query("`tecnologia` != 'LED'")['quantitativo'].sum(),2))
        print('% LED:',round((dataframeSemLinhaTotal.query("`tecnologia` == 'LED'")['quantitativo'].sum()/dataframeSemLinhaTotal['quantitativo'].sum())*100,2))
        print('% nãoLED:',round((dataframeSemLinhaTotal.query("`tecnologia` != 'LED'")['quantitativo'].sum()/dataframeSemLinhaTotal['quantitativo'].sum())*100,2))
    def dataframeFinal(self):
        self.dataframe.pop(self.dataframe.columns[-3])
        self.dataframe.loc['TOTAL']= self.dataframe.sum()
        self.dataframe.loc[self.dataframe.index[-1], 'medicao'] = ''
        self.dataframe.loc[self.dataframe.index[-1], 'potencia_W'] = ''
        self.dataframe.loc[self.dataframe.index[-1], 'perdas_W'] = ''
        self.dataframe.loc[self.dataframe.index[-1], 'tecnologia'] = ''
        self.dataframe.loc[self.dataframe.index[-1], 'potencia'] = ''
        self.dataframe.loc[self.dataframe.index[-1], 'perda'] = ''
        self.dataframe.loc[self.dataframe.index[-1], 'potenciaLampada'] = ''
        return(self.dataframe)

# teste = Cadastro(dataframeCadastro, 11.7472838650023, False)

# teste.plotTecnologia()

# teste.plotConsumoMensal()

# teste.plotQuantitativo()

# teste.printInfo()

# teste.dataframeFinal()

# dataframeBV = pd.read_excel('boaVista_evolucaoParque.xlsx')

# dataframeCadastro = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/CONASA/Boa Vista/cadastroCidade.xlsx')
# len(dataframeCadastro)

# dataframeBVTranspose = dataframeBV.T
# dataframeBVTranspose = dataframeBVTranspose.reset_index()

# headers = dataframeBVTranspose.iloc[0]
# new_df  = pd.DataFrame(dataframeBVTranspose.values[1:], columns=headers)
# new_df

# new_df['%led'] = (new_df['LED']/new_df['TotalPontos'])*100
# new_df.dtypes

# new_df['LED'] = new_df['LED'].astype(float)
# new_df['nãoLED'] = new_df['nãoLED'].astype(float)
# new_df['TotalPontos'] = new_df['TotalPontos'].astype(float)
# new_df['Potência média (W)'] = new_df['Potência média (W)'].astype(float)
# new_df['Potência (kW)'] = new_df['Potência (kW)'].astype(float)
# new_df['Potência (MW)'] = new_df['Potência (MW)'].astype(float)
# new_df['%led'] = new_df['%led'].astype(float)

# pio.templates.default = "simple_white"
# # df = px.data.gapminder().query("country == 'Canada'")
# fig = px.bar(new_df, x='Tudo', y='Potência (MW)',
#              hover_data=['Potência média (W)'], color='%led', color_continuous_scale=px.colors.sequential.Viridis, text_auto=True,
#              height=400)  #labels={'pop':'population of Canada'},
# fig.show()